using DrWatson
@quickactivate "energetics_hydrolysis"

# Here you may include files from the source directory

println(
"""
Currently active project is: $(projectname())

Path of active project: $(projectdir())

Demonstration of the Simulation of a flow-path depicting a baceria mediated redox reaction and
with electron donor supplied from the solid-phase by hydrolysis.
"""
)
using DifferentialEquations
using CairoMakie
using Colors
using Statistics
using DataFrames
using LaTeXStrings
using CSV
using Symbolics

include(srcdir("ode_model.jl"))

## ---- normal parameters model ---------
# Parameters
nmob = 2
nsub = 4

# Defining the parameters
α = 8e-10 #[mol L⁻¹ s⁻¹]
Kb = 5e-5 #[mol L⁻¹] (equivalent water concentration)

μₘ = 1e-5 #[s⁻¹]
Ka = 5e-4 #[mol L⁻¹]
Yd = 0.3 #[mol C_biomass/mol CD_substrate]
γa = 1/25 # stoichiometric coefficient of e-acceptor in the anabolic reaction
γc = 4/5 # stoichiometric coefficient of e-acceptor in the catabolic reaction
Ya = 1/(γa+(1/Yd-1)*γc) # [mol C_biomass/mol CA_substrate]
k_dec = 1.15e-6 #[s⁻¹]
Kd = 1e-6 #[mol L⁻¹]
η = 0.1 # [mol CD_substrate/mol C_biomass]
Ks = 0.22*(α/(k_dec*(1/Yd-η)) - Kb)

Bss = α/(k_dec*(1/Yd-η)) - Kb
rate_ss = α/(Ya*(1/Yd-η))-Kb*k_dec/Ya
cd_min = Kd*k_dec/μₘ/(1-k_dec/μₘ)
ca_min = Ka*k_dec/μₘ/(1-k_dec/μₘ)

#---- Energetic params:
delta_er = μₘ


#defining the transport parameters
dx = 0.01 # [m]
L = 10 # [m]
v = 0.5/86400 # [m/s]
x = 0:dx:L

#dispersion parameters
αₗ = 0.1           # dispersivity [m] - same for all compounds
Dp = [2.8e-10 5.34e-10] # pore diffusion coefficient [m^2/s] 
                         # - one value for each mobile compound
D = αₗ * v .+ Dp # dispersion coefficient of all mobile compounds [m^2/s]

# inflow concentration
cₐ = 6e-4
cd_min = Kd*k_dec/μₘ/(1-k_dec/μₘ)
ca_min = Ka*k_dec/μₘ/(1-k_dec/μₘ)
c_in = [cₐ cd_min]
# Assuming Ca, Cd, Cd_min, and Ca_min are defined
Ca = 10 .^(range(log10(ca_min), stop=log10(1e-1), length=2000))
Fk = k_dec/μₘ
A = Fk .* (Ca .+ Ka)./Ca
Cd = A .* Kd ./ (1 .- A)


μ = @.  μₘ * Ca/(Ca + Ka) * Cd/(Cd + Kd)
μ = μ[1]
eg = 200
δg = μ*(Kb + Bss)/α * eg

B_p = 0:1e-8:Bss
∂B = @. α * (δg/eg)/(Kb+B_p)-k_dec 

fig = Figure()
ax = Axis(fig[1, 1]; xlabel = L"B [c-mol_{bio} L^{-1}]", ylabel = L"\frac{\partial B}{\partial t} [c-mol_{bio} L^{-1} s^{-1}]")
lines!(ax, B_p, ∂B)
fig

fixed_decay!, ca_rate_fd= create_fixed_decay(v, D, dx, c_in, nmob)


#---- Model running: fixed decay+ maintenance-------
# Initial conditions
u0 = zeros(size(x,1), nsub)
du0 = u0
Bss = α/(k_dec*(1/Yd-η)) - Kb
b₀ = 0.1
rate_ss = α/(Ya*(1/Yd-η))-Kb*k_dec/Ya
u0[:,3] .= Bss*b₀
Cs₀ = 1 # mol/kg_sed
ρₛ = 2.65 # [g/cm³]/[kg/L]
ϕ = 0.3
cf = (1-ϕ)*ρₛ/ϕ # [conversion from molC/kg_sed to molC/L_water]
Cs₀ = cf*Cs₀
u0[:,4] .= Cs₀